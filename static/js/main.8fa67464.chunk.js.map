{"version":3,"sources":["components/card/index.tsx","components/button/index.tsx","connectors/index.ts","utils/getContract.ts","hooks/useContract.ts","components/table/index.tsx","pages/Testpage.tsx","App.tsx","reportWebVitals.ts","utils/getLibrary.ts","index.tsx"],"names":["Wrapper","styled","Card","CardStyled","props","children","StyledButton","Button","ButtonStyled","onClick","type","injectedConnector","InjectedConnector","supportedChainIds","getContract","address","ABI","library","account","value","getAddress","isAddress","AddressZero","Error","Contract","getSigner","connectUnchecked","getProviderOrSigner","useContract","addressOrAddressMap","withSignerIfPossible","useWeb3React","chainId","useMemo","undefined","error","console","table","Table","useState","setTable","useEffect","a","TableArr","setUp","map","item","index","div","Testpage","Tokens","setTokens","Addresses","setAddresses","initialValues","number","VampAddress","VampContract","VampAbi","Erc20Contract","erc20abi","useErc20Contract","createTableArray","Tablearr","getListLength","VampNum","ListNum","toNumber","log","x","shibaList","newErc20","attach","symbol","name","activate","active","logAddress","getTokens","balanceOf","TokenCount","formatEther","onSubmit","values","actions","setSubmitting","AddToken","htmlFor","id","placeholder","balance","approve","burnShibas","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getLibrary","provider","connector","Web3Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8fa67464.chunk.js","sourcesContent":["import styled from 'styled-components'\r\nimport { Card } from 'rebass'\r\n\r\nimport React from 'react'\r\nconst Wrapper = styled(Card)`\r\n@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@100&display=swap');\r\n\r\n\r\nfont-family: 'Roboto', sans-serif;\r\nheight: 30em;\r\nwidth: 30em;\r\ntext-align: center;\r\n::selection {\r\n  background-color: #a13398c5;\r\n}\r\nfont-size: 1.5em;\r\nborder-radius: 10px;\r\nbackground-color: #af335213;   \r\nbackdrop-filter: blur(4px);\r\ncolor: white;\r\npadding: 2em;\r\n/* border: 5px solid;\r\nborder-image-slice: 1;\r\nborder-width: 4px;\r\nborder-color: #4343921c; */\r\ndisplay: flex;\r\nflex-direction: column;\r\njustify-content: space-around;\r\nalign-items: center;\r\nbox-shadow:0px 8px 17px 2px rgba(0,0,0,0.14) , 0px 3px 14px 2px rgba(0,0,0,0.12) , 0px 5px 5px -3px rgba(0,0,0,0.2); \r\n@media (max-width:800px){\r\n    font-size: 1em;\r\n    padding: 1em;\r\n\r\n}\r\n`\r\n\r\n\r\ninterface Props {\r\n    children: React.ReactNode\r\n  }\r\n  \r\n\r\nconst CardStyled:React.FC<Props> = (props) => {\r\n    return (\r\n        <div>\r\n            <Wrapper>\r\n               {props.children}\r\n\r\n            </Wrapper>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardStyled\r\n","import styled from 'styled-components'\r\nimport { Button } from 'rebass'\r\n\r\nimport React, { Children } from 'react'\r\n\r\nconst StyledButton = styled(Button)`\r\nbackground-color: #36368114;\r\npadding: 40px;\r\nfont-family: 'Roboto', sans-serif;\r\n\r\ntransition: all 1s ease-out;\r\nbox-shadow:0px 8px 17px 2px rgba(0,0,0,0.14) , 0px 3px 14px 2px rgba(0,0,0,0.12) , 0px 5px 5px -3px rgba(0,0,0,0.2); \r\n:hover {\r\n  background-color: #2e2ec430;\r\n\r\n}\r\n::selection {\r\n  background-color: #a13398c5;\r\n}\r\n`\r\ninterface Props {\r\n    children: React.ReactNode,\r\n    onClick: () => void\r\n\r\n  }\r\n  \r\n\r\nconst ButtonStyled:React.FC<Props> = ({children, onClick}) => {\r\n\r\n    return (\r\n        <StyledButton type=\"button\" onClick={onClick}>\r\n            {children}\r\n        </StyledButton>\r\n    )\r\n}\r\n\r\nexport default ButtonStyled\r\n","import { InjectedConnector } from '@web3-react/injected-connector'\r\n\r\n\r\nexport const injectedConnector = new InjectedConnector({\r\n    supportedChainIds: [\r\n        1, // Mainet\r\n        3, // Ropsten\r\n        4, // Rinkeby\r\n        5, // Goerli\r\n        42, // Kovan\r\n        31337 //Hardhat\r\n      ],\r\n    \r\n})","import {JsonRpcSigner, Web3Provider } from \"@ethersproject/providers\"\r\nimport { Contract } from \"ethers\"\r\nimport { getAddress } from '@ethersproject/address'\r\nimport { AddressZero } from '@ethersproject/constants'\r\nimport ethers from 'ethers'\r\n\r\nexport function isAddress(value: any): string | false {\r\n    try {\r\n      return getAddress(value)\r\n    } catch {\r\n      return false\r\n    }\r\n  }\r\n  \r\n\r\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\r\n    return library.getSigner(account).connectUnchecked()\r\n  }\r\n  \r\n\r\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\r\n    return account ? getSigner(library, account) : library\r\n  }\r\n  \r\n\r\nexport function getContract(address: string, ABI: any, library: Web3Provider, account?: string): Contract {\r\n    if (!isAddress(address) || address === AddressZero) {\r\n      throw Error(`Invalid 'address' parameter '${address}'.`)\r\n    }\r\n  \r\n    return new Contract(address, ABI, getProviderOrSigner(library, account) as any)\r\n  }\r\n\r\n  \r\n","import VampAbi from \"../abi/vampabi.json\"\r\nimport { Contract } from \"ethers\"\r\nimport { useMemo } from \"react\"\r\nimport { useWeb3React } from \"@web3-react/core\"\r\nimport { getContract } from \"../utils/getContract\"\r\nimport { VampyAddresses } from \"../constants/VampyAddresses\"\r\nimport erc20abi from '../abi/erc20abi.json'\r\nexport function useContract<T extends Contract = Contract>(\r\n    addressOrAddressMap: string | { [chainId: number]: string } | undefined,\r\n    ABI: any,\r\n    withSignerIfPossible = true\r\n  ): T | null {\r\n    const { library, account, chainId } = useWeb3React()\r\n  \r\n    return useMemo(() => {\r\n      if (!addressOrAddressMap || !ABI || !library || !chainId) return null\r\n      let address: string | undefined\r\n      if (typeof addressOrAddressMap === 'string') address = addressOrAddressMap\r\n      else address = addressOrAddressMap[chainId]\r\n      if (!address) return null\r\n      try {\r\n        return getContract(address, ABI, library, withSignerIfPossible && account ? account : undefined)\r\n      } catch (error) {\r\n        console.error('Failed to get contract', error)\r\n        return null\r\n      }\r\n    }, [addressOrAddressMap, ABI, library, chainId, withSignerIfPossible, account]) as T\r\n  }\r\n  \r\n\r\n\r\n  export function useVampContract(address: any): Contract | null {\r\n    return useContract(address, VampAbi, true)\r\n  }\r\n  export function useErc20Contract(address: any): Contract | null {\r\n    return useContract(address, erc20abi, true)\r\n  }\r\n  ","import React, { Props } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useState,useEffect } from 'react'\r\n\r\nconst Wrapper = styled.table`\r\nwidth: 5em;\r\nfont-size: .7em;\r\nborder-collapse: collapse;\r\nth {\r\n    text-align: left;\r\n}\r\ntd {\r\n    text-align: left;\r\n}\r\nth, td {\r\n    border: 1px solid white;\r\n    padding: 10px;\r\n}\r\n\r\n\r\n\r\n`\r\ninterface Propy {\r\n    TableArr: Promise<string[][]>\r\n}\r\n\r\nconst Table:React.FC<Propy> = (props) => {\r\n    const [Table, setTable] = useState<string[][]>()\r\n\r\n    useEffect(() => {\r\n        const setUp = async() => {\r\n            \r\n        setTable(await props.TableArr)\r\n\r\n        }\r\n        setUp()\r\n\r\n\r\n    }, [])\r\n\r\n\r\n\r\n\r\n    return (\r\n        <Wrapper>\r\n            <thead>\r\n             <tr>\r\n                           <th>\r\n                               Name\r\n                           </th>\r\n                           <th>\r\n                               Symbol\r\n                           </th>\r\n                           <th>\r\n                               Address\r\n                           </th>\r\n                    \r\n                           </tr>\r\n                           </thead>\r\n                           <tbody>\r\n\r\n\r\n\r\n                           {Table && Table.map((item,index) => {\r\n                               return (\r\n                                   <tr key={`tr-${index}`}>\r\n                                            {item.map((item,index)=> {\r\n                                                return (\r\n                                                    \r\n                                                <td key={`td-${index}`}>\r\n                                                {item}\r\n                                            </td>\r\n\r\n\r\n                                                )\r\n\r\n\r\n\r\n                                            })}\r\n                                       \r\n                                   </tr>\r\n                               )\r\n                          \r\n\r\n                           }\r\n\r\n                           )}\r\n{/*                            <td>{props.TableArr[0][0]}</td>\r\n                           <td>{props.TableArr[0][1]}</td>\r\n                           <td>{props.TableArr[0][2]}</td> */}\r\n            </tbody>\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport CardStyled from '../components/card/index'\r\nimport { Web3Provider } from '@ethersproject/providers'\r\nimport ButtonStyled from '../components/button/index'\r\nimport { injectedConnector } from '../connectors'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useState,useEffect } from 'react'\r\nimport Vampabi from '../abi/vampabi.json'\r\nimport { useErc20Contract, useVampContract } from '../hooks/useContract'\r\nimport { Contract } from '@ethersproject/contracts'\r\nimport {\r\n    Formik,\r\n    FormikHelpers,\r\n    FormikProps,\r\n    Form,\r\n    Field,\r\n    FieldProps,\r\n  } from 'formik';\r\n \r\nimport Table from '../components/table'\r\nimport { errors, ethers } from 'ethers'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport { formatEther } from '@ethersproject/units'\r\nconst Wrapper = styled.div`\r\ndisplay: flex;\r\njustify-content: space-around;\r\nalign-items: center;\r\nheight: 100vh;\r\nwidth: 100vw;\r\n\r\n\r\n`\r\n\r\n\r\ninterface MyFormValues {\r\n    number: any\r\n    address: string;\r\n  }\r\n \r\n\r\nconst Testpage = () => {\r\n    const [Tokens, setTokens] = useState<BigNumber | number | string>(0)\r\n    const [Addresses, setAddresses] = useState([])\r\n\r\n    const initialValues: MyFormValues = { address: '', number: 0 };\r\n\r\n    const VampAddress = \"0xdD8A4824809CDdE4F9beb1BFC58c3949d16a5Ca6\"\r\n    const VampContract = useVampContract(VampAddress)\r\n    const Erc20Contract = useErc20Contract(VampAddress)\r\n    const createTableArray = async ():Promise<string[][]> => {\r\n        let Tablearr: string[][] = [];\r\n        var VampNum = await VampContract?.getListLength()\r\n        var ListNum: number = VampNum.toNumber()\r\n        console.log(ListNum);\r\n        for(let x = 0; x < ListNum; x++){\r\n            let address: string = await VampContract?.shibaList(x)\r\n            let newErc20 = Erc20Contract?.attach(address)\r\n            let symbol: string = await newErc20?.symbol();\r\n            let name: string = await newErc20?.name();\r\n            Tablearr[x] = [name,symbol,address]\r\n        }\r\n        return Tablearr\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    const {chainId, account, activate, active,library} = useWeb3React<Web3Provider>()\r\n    const onClick = async() => {\r\n        activate(injectedConnector)\r\n        \r\n        \r\n      }\r\n      useEffect( () => {\r\n          if (active) {\r\n            const logAddress = async() => {\r\n                setAddresses(await VampContract?.shibaList(1))\r\n        \r\n            }\r\n            logAddress()\r\n\r\n\r\n          }\r\n      }, [active])\r\n      useEffect(() => {\r\n          console.log(Addresses);\r\n      }, [Addresses])\r\n    const getTokens = async() => {\r\n        try {\r\n            if(VampContract) {\r\n                const TokenCount = await VampContract.balanceOf(account)\r\n                setTokens(formatEther(TokenCount))\r\n                console.log(formatEther(TokenCount))\r\n                console.log(Addresses);\r\n\r\n            }\r\n     \r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n        }\r\n     \r\n//[[\"Dummy\",\"DMY\",\"0xxxxxx\"],[\"Testy\",\"TST\",\"0x7788884\"]] dummy data\r\n \r\n    }\r\n    return (\r\n        <>\r\n           {active ? (\r\n               <Wrapper>\r\n               <CardStyled>\r\n                   \r\n                   Metamask is connected.\r\n                   <br/>\r\n                   Welcome {account}!\r\n                   <br/>\r\n                   <br/>\r\n                   \r\n                   <Table TableArr={createTableArray()}/>\r\n               </CardStyled>\r\n               <CardStyled>\r\n                   Current Vamp token count:\r\n                   <br />\r\n                   <br />\r\n                   {Tokens}\r\n                   <br />\r\n                   <ButtonStyled onClick={getTokens}>\r\n                       Get Tokens\r\n                   </ButtonStyled>\r\n                   <br/>\r\nIndex Token address:\r\n                   <Formik\r\n         initialValues={initialValues}\r\n         onSubmit={async(values, actions) => {\r\n           console.log({ values, actions });\r\n           actions.setSubmitting(false);\r\n           await VampContract?.AddToken(values.address,1)\r\n           console.log(await VampContract?.shibaList(1));\r\n           console.log(await VampContract?.shibaList(2));\r\n\r\n\r\n         }}\r\n       >\r\n         <Form>\r\n           <label htmlFor=\"address\"></label>\r\n           <Field id=\"address\" name=\"address\" placeholder=\"Address\" />\r\n           <br />\r\n           <button type=\"submit\">Submit</button>\r\n         </Form>\r\n       </Formik>\r\n       <Formik\r\n         initialValues={initialValues}\r\n         onSubmit={async(values, actions) => {\r\n           console.log({ values, actions });\r\n           actions.setSubmitting(false);\r\n           const newErc20 = Erc20Contract?.attach(values.address)\r\n           const balance = newErc20?.balanceOf(account)\r\n           await newErc20?.approve(VampContract?.address,balance)\r\n           console.log(balance);\r\n\r\n\r\n         }}\r\n       >\r\n         <Form>\r\n           <label htmlFor=\"address\">approve tokens</label>\r\n           <br />\r\n           <Field id=\"address\" name=\"address\" placeholder=\"Address\" />\r\n           <br />\r\n           <button type=\"submit\">Submit</button>\r\n         </Form>\r\n       </Formik>\r\n           \r\n\r\n\r\n       <Formik\r\n         initialValues={initialValues}\r\n         onSubmit={async(values, actions) => {\r\n           console.log({ values, actions });\r\n           actions.setSubmitting(false);\r\n           await VampContract?.burnShibas(values.address,values.number)\r\n           \r\n\r\n\r\n         }}\r\n       >\r\n         <Form>\r\n           <label htmlFor=\"address\">Burn indexed Tokens</label>\r\n           <label htmlFor=\"number\"></label>\r\n           <br />\r\n           <Field id=\"address\" name=\"address\" placeholder=\"Address\" />\r\n           <Field id=\"number\" name=\"number\" placeholder=\"Number\" />\r\n           <br />\r\n           <button type=\"submit\">Submit</button>\r\n         </Form>\r\n       </Formik>\r\n\r\n               </CardStyled>\r\n               </Wrapper>\r\n           ): (\r\n               <Wrapper>\r\n               <CardStyled>\r\n                       Please connect your metamask to continue.\r\n           <ButtonStyled onClick={onClick}>\r\n               Connect\r\n           </ButtonStyled>\r\n          \r\n\r\n               </CardStyled>\r\n               \r\n               </Wrapper>\r\n           )}\r\n       \r\n           \r\n        </>\r\n            \r\n    )\r\n\r\n}\r\nexport default Testpage","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Wallettest from './components/Wallettest';\nimport Testpage from './pages/Testpage'\nfunction App() {\n  return (\n    <Testpage/>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {Web3Provider} from '@ethersproject/providers'\r\n\r\n\r\nfunction getLibrary(provider?: any, connector?: any): any {\r\n    \r\n    return new Web3Provider(provider) \r\n  }\r\n \r\n  \r\nexport default getLibrary;  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Web3ReactProvider } from '@web3-react/core'\nimport getLibrary from './utils/getLibrary';\nimport ethers from 'ethers'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Web3ReactProvider getLibrary={getLibrary}>\n    <App />\n    </Web3ReactProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}